{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","dispDrum","setdispDrum","handleKeyPress","event","console","log","key","indexOf","handleClick","toUpperCase","document","getElementById","play","useEffect","addEventListener","removeEventListener","className","id","onClick","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8MA8DeA,MA5Df,WAAgB,IAAD,EACmBC,mBAAS,KAD5B,mBACNC,EADM,KACIC,EADJ,KAMb,SAASC,EAAgBC,GACvBC,QAAQC,IAAIF,EAAMG,KACF,qBACHC,QAAQJ,EAAMG,MAAQ,GACjCE,EAAYL,EAAMG,IAAIG,eAI1B,SAASD,EAAaF,GACpBL,EAAYK,EAAM,SAClBI,SAASC,eAAeL,GAAKM,OAG/B,OAjBAC,qBAAU,WAER,OADAH,SAASI,iBAAiB,UAAWZ,GAC7B,WAAOQ,SAASK,oBAAoB,UAAWb,MACvD,IAeF,yBAAKc,UAAU,YAAYC,GAAG,gBAC5B,wBAAID,UAAU,cAAcC,GAAG,WAAWjB,GAC1C,yBAAKgB,UAAU,OACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACd,4BAAQE,QAAS,kBAAMV,EAAY,MAAMQ,UAAU,gCAAgCC,GAAG,QAAO,2BAAOD,UAAU,OAAOC,GAAG,IAAIE,IAAI,6DAA6D,MACxL,yBAAKH,UAAU,UACpB,4BAAQE,QAAS,kBAAMV,EAAY,MAAMQ,UAAU,gCAAgCC,GAAG,WAAU,2BAAOD,UAAU,OAAOC,GAAG,IAAIE,IAAI,2DAA2D,MACxL,yBAAKH,UAAU,UACrB,4BAAQE,QAAS,kBAAMV,EAAY,MAAMQ,UAAU,gCAAgCC,GAAG,YAAW,2BAAQD,UAAU,OAAOC,GAAG,IAAIE,IAAI,+DAA+D,OAGvM,yBAAKH,UAAU,OACb,yBAAKA,UAAU,UACd,4BAAQE,QAAS,kBAAMV,EAAY,MAAMQ,UAAU,gCAAgCC,GAAG,QAAO,2BAAOD,UAAU,OAAOC,GAAG,IAAIE,IAAI,+DAA+D,MAC1L,yBAAKH,UAAU,UACpB,4BAAQE,QAAS,kBAAMV,EAAY,MAAMQ,UAAU,gCAAgCC,GAAG,aAAY,2BAAOD,UAAU,OAAOC,GAAG,IAAIE,IAAI,2DAA2D,MAC1L,yBAAKH,UAAU,UACrB,4BAAQE,QAAS,kBAAMV,EAAY,MAAMQ,UAAU,gCAAgCC,GAAG,UAAS,2BAAOD,UAAU,OAAOC,GAAG,IAAIE,IAAI,oEAAoE,OAGzM,yBAAKH,UAAU,OACb,yBAAKA,UAAU,UACd,4BAAQE,QAAS,kBAAMV,EAAY,MAAMQ,UAAU,gCAAgCC,GAAG,eAAc,2BAAOD,UAAU,OAAOC,GAAG,IAAIE,IAAI,kEAAkE,MACpM,yBAAKH,UAAU,UACpB,4BAAQE,QAAS,kBAAMV,EAAY,MAAMQ,UAAU,gCAAgCC,GAAG,cAAa,2BAAOD,UAAU,OAAOC,GAAG,IAAIE,IAAI,iEAAiE,MACjM,yBAAKH,UAAU,UACrB,4BAAQE,QAAS,kBAAMV,EAAY,MAAMQ,UAAU,gCAAgCC,GAAG,SAAQ,2BAAOD,UAAU,OAAOC,GAAG,IAAIE,IAAI,4DAA4D,QAIlM,yBAAKH,UAAU,gBC3CDI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjB,SAASC,eAAe,SD0HpB,kBAAmBiB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.c1f181af.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nfunction App() {\n  const [dispDrum, setdispDrum] = useState(\" \");\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeyPress);\n    return (() => {document.removeEventListener(\"keydown\", handleKeyPress)});\n  },[])\n  function handleKeyPress (event) {\n    console.log(event.key);\n    let validKeys = \"qweasdzxcQWEASDZXC\"\n    if(validKeys.indexOf(event.key) > -1){\n      handleClick(event.key.toUpperCase());\n    }\n  }\n\n  function handleClick (key) {\n    setdispDrum(key + \" drum\");\n    document.getElementById(key).play()\n  }\n\n  return (\n  <div className=\"jumbotron\" id=\"drum-machine\">\n    <h3 className=\"text-center\" id=\"display\">{dispDrum}</h3>\n    <div className=\"row\">\n      <div className=\"col-sm-5\" />\n      <div className=\"col-sm-2 card bg-secondary\">\n        <div className=\"row\">\n          <div className=\"col-sm\">\n           <button onClick={() => handleClick(\"Q\")} className=\"drum-pad btn btn-light btn-lg\" id=\"clap\"><audio className=\"clip\" id=\"Q\" src=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\"/>{\"Q\"}</button>\n          </div><div className=\"col-sm\">\n           <button onClick={() => handleClick(\"W\")} className=\"drum-pad btn btn-light btn-lg\" id=\"open-hh\"><audio className=\"clip\" id=\"W\" src=\"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\"/>{\"W\"}</button>\n           </div><div className=\"col-sm\">\n           <button onClick={() => handleClick(\"E\")} className=\"drum-pad btn btn-light btn-lg\" id=\"kicknhat\"><audio  className=\"clip\" id=\"E\" src=\"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"/>{\"E\"}</button>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-sm\">\n           <button onClick={() => handleClick(\"A\")} className=\"drum-pad btn btn-light btn-lg\" id=\"kick\"><audio className=\"clip\" id=\"A\" src=\"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"/>{\"A\"}</button>\n          </div><div className=\"col-sm\">\n           <button onClick={() => handleClick(\"S\")} className=\"drum-pad btn btn-light btn-lg\" id=\"cloded-hh\"><audio className=\"clip\" id=\"S\" src=\"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\"/>{\"S\"}</button>\n           </div><div className=\"col-sm\">\n           <button onClick={() => handleClick(\"D\")} className=\"drum-pad btn btn-light btn-lg\" id=\"shaker\"><audio className=\"clip\" id=\"D\" src=\"https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3\"/>{\"D\"}</button>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-sm\">\n           <button onClick={() => handleClick(\"Z\")} className=\"drum-pad btn btn-light btn-lg\" id=\"punchy-kick\"><audio className=\"clip\" id=\"Z\" src=\"https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3\"/>{\"Z\"}</button>\n          </div><div className=\"col-sm\">\n           <button onClick={() => handleClick(\"X\")} className=\"drum-pad btn btn-light btn-lg\" id=\"side-Stick\"><audio className=\"clip\" id=\"X\" src=\"https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3\"/>{\"X\"}</button>\n           </div><div className=\"col-sm\">\n           <button onClick={() => handleClick(\"C\")} className=\"drum-pad btn btn-light btn-lg\" id=\"snare\"><audio className=\"clip\" id=\"C\" src=\"https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3\"/>{\"C\"}</button>\n          </div>\n        </div>\n      </div>\n      <div className=\"col-sm-5\" />\n    </div>\n  </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}